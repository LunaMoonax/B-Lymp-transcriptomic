import glob
import os

#Define input path
input_path = "/scratch/lustre/home/vira9982/transcriptomics/raw_data"

samples = ["SRR8134484", "SRR8134486"]

#Reference genome files
genome_index_dir = "/scratch/lustre/home/vira9982/transcriptomics/reference/GRCh38.genome.fa"
genome_gff = "/scratch/lustre/home/vira9982/transcriptomics/reference/gencode.v47.chr_patch_hapl_scaff.annotation.gff3"

#Rule all: final target files
rule all:
    input:
        expand("results/fastqc/{sample}_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_fq_fastqc.html", sample=samples),
        expand("results/fastp/{sample}_fq.gz", sample=samples),
        expand("results/tophat/{sample}.bam", sample=samples)

rule fastqc:
    input:
        fq1 = lambda wildcards: f"{input_path}/{wildcards.sample}.fastq.gz",
        fq2 = lambda wildcards: f"results/fastp/{wildcards.sample}_fq.gz"
    output:
        html1 = "results/fastqc/{sample}_fastqc.html",
        html2 = "results/fastqc/{sample}_fq_fastqc.html",
        zip1 = "results/fastqc/{sample}_fastqc.zip",
        zip2 = "results/fastqc/{sample}_fq_fastqc.zip"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 4
    shell:
        """
            fastqc -t {threads} --outdir results/fastqc {input.fq1} {input.fq2}
        """

rule fastp:
    input:
        fq = lambda wildcards: f"{input_path}/{wildcards.sample}.fastq.gz"
    output:
        fp = "results/fastp/{sample}_fq.gz",
        html = "results/fastp/{sample}_fq.html",
        json = "results/fastp/{sample}_fq.json"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 4
    shell:
        """
            fastp -i {input.fq} -o {output.fp} -h {output.html} -j {output.json} -w {threads} 
        """
        
rule tophat:
    input:
        fq = "results/fastp/{sample}_fq.gz"
    output:
        bam = "results/tophat/{sample}.bam",
        bai = "results/tophat/{sample}.bam.bai",
        stat = "results/tophat/{sample}.stat"
    conda: "envs/tophat_rnaseq.yaml"
    threads: 8
    shell:
        """
            tophat -p {threads} \
            --max-multihits 1 \
            -G {genome_gff} \
            -o tophat_tmp_{wildcards.sample} \
            {genome_index_dir} {input.fq} > {output.stat} 2>&1

            mv tophat_tmp_{wildcards.sample}/accepted_hits.bam {output.bam}
            samtools index {output.bam}
            rm -r tophat_tmp_{wildcards.sample}
        """
