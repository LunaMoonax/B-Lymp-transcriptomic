import glob
import os

#Define input path
input_path = "/scratch/lustre/home/vira9982/transcriptomics/raw_data"

samples = ["SRR8134500", "SRR8134502", "SRR8134504", "SRR8134501", "SRR8134503", "SRR8134505"]

#Reference genome files
genome_index_dir = "/scratch/lustre/home/vira9982/transcriptomics/reference/GRCh38.genome.fa"
genome_gff = "/scratch/lustre/home/vira9982/transcriptomics/reference/gencode.v47.chr_patch_hapl_scaff.annotation.gff3"

#Rule all: final target files
rule all:
    input:
        expand("results/fastqc/{sample}_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_fq_fastqc.html", sample=samples),
        expand("results/fastp/{sample}_fq.gz", sample=samples),
        expand("results/tophat/{sample}/accepted_hits.bam", sample=samples),
        "results/counts.txt",
        "results/multiqc_report.html"

rule fastqc:
    input:
        fq1 = lambda wildcards: f"{input_path}/{wildcards.sample}.fastq.gz",
        fq2 = lambda wildcards: f"results/fastp/{wildcards.sample}_fq.gz"
    output:
        html1 = "results/fastqc/{sample}_fastqc.html",
        html2 = "results/fastqc/{sample}_fq_fastqc.html",
        zip1 = "results/fastqc/{sample}_fastqc.zip",
        zip2 = "results/fastqc/{sample}_fq_fastqc.zip"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 4
    shell:
        """
            fastqc -t {threads} --outdir results/fastqc {input.fq1} {input.fq2}
        """

rule fastp:
    input:
        fq = lambda wildcards: f"{input_path}/{wildcards.sample}.fastq.gz"
    output:
        fp = "results/fastp/{sample}_fq.gz",
        html = "results/fastp/{sample}_fq.html",
        json = "results/fastp/{sample}_fq.json"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 4
    shell:
        """
            fastp -i {input.fq} -o {output.fp} -h {output.html} -j {output.json} -w {threads} 
        """
        
rule tophat:
    input:
        fq = "results/fastp/{sample}_fq.gz"
    output:
        bam = "results/tophat/{sample}/accepted_hits.bam",
        bai = "results/tophat/{sample}/accepted_hits.bam.bai",
        stat = "results/tophat/{sample}.stat",
        summary = "results/tophat/{sample}/align_summary.txt"
    conda: "envs/tophat_rnaseq.yaml"
    threads: 8
    shell:
        """
            tophat -p {threads} \
            --max-multihits 1 \
            -G {genome_gff} \
            -o results/tophat/{wildcards.sample} \
            {genome_index_dir} {input.fq} > {output.stat} 2>&1

            samtools index {output.bam}
        """

rule featureCounts:
    input:
        bam = expand("results/tophat/{sample}/accepted_hits.bam", sample=samples)
    output:
        counts = "results/counts.txt",
        stats = "results/counts.txt.summary"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 8
    shell:
        """
            featureCounts -a {genome_gff} -F GTF -t exon -g gene_id \
            -o {output.counts} -s 0 -T {threads} {input.bam}
        """

rule multiqc:
    input:
        fastqc_zip = expand("results/fastqc/{sample}_fastqc.zip", sample=samples),
        trimmed_zip = expand("results/fastqc/{sample}_fq_fastqc.zip", sample=samples),
        alignment_summary = expand("results/tophat/{sample}/align_summary.txt", sample=samples),
        counts_summary = "results/counts.txt.summary"
    output:
        html = "results/multiqc_report.html",
        data = directory("results/multiqc_data")
    log:
        "logs/multiqc.log"
    conda: "envs/preprocess_rnaseq.yaml"
    shell:
        """
            multiqc results/ -o results/ > {log} 2>&1
        """
