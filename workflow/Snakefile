import glob
import os

#Define input path
input_path = "/scratch/lustre/home/vira9982/transcriptomics/raw_data"

samples = ["SRR8134500", "SRR8134502", "SRR8134504", "SRR8134501", "SRR8134503", "SRR8134505"]

#Reference genome files
genome_index_dir = "/scratch/lustre/home/vira9982/transcriptomics/reference/GRCh38.genome.fa"
genome_gff = "/scratch/lustre/home/vira9982/transcriptomics/reference/gencode.v47.chr_patch_hapl_scaff.annotation.gff3"
genome_bed = "/scratch/lustre/home/vira9982/transcriptomics/reference/ref.bed"

#Rule all: final target files
rule all:
    input:
        expand("results/fastqc/{sample}_raw_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_trimmed_fastqc.html", sample=samples),
        expand("results/trim_galore/{sample}_trimmed.fq.gz", sample=samples),
        expand("results/tophat/{sample}/accepted_hits_{sample}.bam", sample=samples),
        expand("results/rseqc/{sample}.geneBodyCoverage.txt", sample=samples),
        expand("results/rseqc/{sample}_read_distribution.txt", sample=samples),
        "results/counts.txt",
        "results/multiqc_report.html"

rule fastqc:
    input:
        fq1 = lambda wildcards: f"{input_path}/{wildcards.sample}.fastq.gz",
        fq2 = lambda wildcards: f"results/trim_galore/{wildcards.sample}_trimmed.fq.gz"
    output:
        html1 = "results/fastqc/{sample}_raw_fastqc.html",
        html2 = "results/fastqc/{sample}_trimmed_fastqc.html",
        zip1 = "results/fastqc/{sample}_raw_fastqc.zip",
        zip2 = "results/fastqc/{sample}_trimmed_fastqc.zip"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 4
    shell:
        """
            fastqc -t {threads} --outdir results/fastqc {input.fq1} {input.fq2}

            mv results/fastqc/{wildcards.sample}_fastqc.html {output.html1}
            mv results/fastqc/{wildcards.sample}_fastqc.zip {output.zip1}
        """

rule trimGalore:
    input:
        fq = lambda wildcards: f"{input_path}/{wildcards.sample}.fastq.gz"
    output:
        fq = "results/trim_galore/{sample}_trimmed.fq.gz"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 4
    params:
        quality = 25,
        length = 20
    shell:
        """
            trim_galore -o results/trim_galore \
            -q {params.quality} \
            -j {threads} \
            --length {params.length} \
            {input.fq}
        """
        
rule tophat:
    input:
        fq = "results/trim_galore/{sample}_trimmed.fq.gz"
    output:
        bam = "results/tophat/{sample}/accepted_hits.bam",
        bai = "results/tophat/{sample}/accepted_hits.bam.bai",
        stat = "results/tophat/{sample}.stat",
        summary = "results/tophat/{sample}/align_summary.txt"
    conda: "envs/tophat_rnaseq.yaml"
    threads: 8
    shell:
        """
            tophat -p {threads} \
            --max-multihits 1 \
            -G {genome_gff} \
            -o results/tophat/{wildcards.sample} \
            {genome_index_dir} {input.fq} > {output.stat} 2>&1

            samtools index {output.bam}
        """

rule rename_align_files:
    input:
        old_bam = "results/tophat/{sample}/accepted_hits.bam",
        old_bai = "results/tophat/{sample}/accepted_hits.bam.bai",
        old_summary = "results/tophat/{sample}/align_summary.txt"
    output:
        new_bam = "results/tophat/{sample}/accepted_hits_{sample}.bam",
        new_bai = "results/tophat/{sample}/accepted_hits_{sample}.bam.bai",
        new_summary = "results/tophat/{sample}/align_summary_{sample}.txt"
    shell:
        """
            mv {input.old_bam} {output.new_bam}
            mv {input.old_bai} {output.new_bai}
            mv {input.old_summary} {output.new_summary}
        """

rule featureCounts:
    input:
        bam = expand("results/tophat/{sample}/accepted_hits_{sample}.bam", sample=samples)
    output:
        counts = "results/counts.txt",
        stats = "results/counts.txt.summary"
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 8
    shell:
        """
            featureCounts -a {genome_gff} -F GFF -t exon -g gene_id \
            -o {output.counts} -s 0 -T {threads} {input.bam}
        """

rule geneBody_coverage:
    input:
        bam = "results/tophat/{sample}/accepted_hits_{sample}.bam"
    output:
        txt = "results/rseqc/{sample}.geneBodyCoverage.txt"
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
            geneBody_coverage.py -r {genome_bed} -i {input.bam} -o results/rseqc/{wildcards.sample}
        """

rule read_distribution:
    input:
        bam = "results/tophat/{sample}/accepted_hits_{sample}.bam"
    output:
        txt = "results/rseqc/{sample}_read_distribution.txt"
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
            read_distribution.py -i {input.bam} -r {genome_bed} > {output.txt}
        """

rule multiqc:
    input:
        expand("results/fastqc/{sample}_raw_fastqc.zip", sample=samples),
        expand("results/fastqc/{sample}_trimmed_fastqc.zip", sample=samples),
        expand("results/tophat/{sample}/align_summary_{sample}.txt", sample=samples),
        expand("results/rseqc/{sample}.geneBodyCoverage.txt", sample=samples),
        expand("results/rseqc/{sample}_read_distribution.txt", sample=samples),
        "results/counts.txt.summary"
    output:
        "results/multiqc_report.html",
        directory("results/multiqc_data")
    log:
        "logs/multiqc.log"
    conda: "envs/preprocess_rnaseq.yaml"
    shell:
        """
            multiqc -s --outdir results/ {input}
        """
